//serializars
class CreateCsvLeadInfoSerializer(serializers.ModelSerializer):
    class Meta:
        model = LeadInfo
        fields = [
            "id",
            "lead_name",
            "lead_contact_no",
            "lead_email_id",
            "lead_area",
            "remark",
            "lead_address",
            "academic_year",
            "branch",
            "contact_source",
            "pin_code"
        ]




//views

class UploadLeadByAdminInfoCsvFile(CreateAPIView):
    # call center manager
    """
    :Created-by:Sadath
    :purpose:
    :input: Excel sheet
    :models: Leadinfo,
    :Output: No-Output
    """

    parser_classes = (MultiPartParser, JSONParser)
    serializer_class = CreateCsvLeadInfoSerializer

    def result_data(self, request, row):
        request.data["lead_name"] = row["Name"]
        request.data["lead_contact_no"] = row["Mobile"]
        request.data["lead_email_id"] = row["Email"]
        request.data["lead_area"] = row["Area"]
        request.data["remark"] = row["Remark"]
        request.data["lead_address"] = row["Data Location"]
        request.data["pin_code"] = row["Pincode"]
        data = request.data
        return data

    def create(self, request, *args, **kwargs):
        try:
            csv_file = request.data.get("csv_file")
            result = pandas.read_excel(csv_file)
            lead_list = []
            employee_detail = Employee.objects.get(user_id=self.request.user.id)
            for index, row in result.iterrows():
                if not LeadInfo.objects.filter(lead_contact_no=row["Mobile"],
                                               school_fk_id=employee_detail.school_fk.id).exists():
                    lead_instance = UploadLeadInfoCsvFile.result_data(self, request, row)
                    serializer = self.get_serializer(data=lead_instance)
                    serializer.is_valid(raise_exception=True)
                    self.perform_create(serializer)
                    serializer.save()
                    data = serializer.data
                    lead_obj = LeadInfo.objects.get(id=data["id"])
                    lead_obj.school_fk_id = employee_detail.school_fk.id
                    lead_obj.save()

                    child_obj = ChildDetail.objects.create(child_name=row["Child Name"])
                    lead_obj.child_detail_fk.add(child_obj.id)
                    lead_obj.child_detail_fk.add(child_obj.id)
                    lead_list.append(data)
                    AssignedLead.objects.create(
                        assigned_lead_id=data["id"], counselor_assign=True,
                        assigned_date_to_counselor=datetime.date.today()
                    )
                else:
                    lead_instance = UploadLeadInfoCsvFile.result_data(self, request, row)
                    serializer = CreateCsvLeadDuplicateInfoSerializer(data=lead_instance)
                    serializer.is_valid(raise_exception=True)
                    self.perform_create(serializer)
                    serializer.save()
                    data = serializer.data
                    lead_obj = DuplicateLeadInfo.objects.get(id=data["id"])
                    lead_obj.school_fk_id = employee_detail.school_fk.id
                    lead_obj.save()

                    child_obj = ChildDetail.objects.create(child_name=row["Child Name"])
                    lead_obj.child_detail_fk.add(child_obj.id)
                    lead_list.append(data)
            return Response(lead_list, status=status.HTTP_201_CREATED)
        except KeyError as e:
            return Response({"error": str(e) + " key is not exists"}, status=status.HTTP_400_BAD_REQUEST)
            
            
            
            
  
